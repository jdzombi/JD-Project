<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_Player</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
acc = 0.16;
grav = 1.0;
hsp = 0;
vsp = 0;
jumpspeed = 16;
movespeed = 5;
MAX_SPEED = 10;
no_hit = 0;
knockBackCounter = 0;

sprite_index = spr_Player
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if image_alpha=1.0 {
    image_alpha=0.3
}
else {
    image_alpha=1.0
}
    
if no_hit=1 {
    alarm[1] = 2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>no_hit = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.freeze != 1) {
    //Get Player Input
    key_right = keyboard_check(ord("D"));
    key_left = -keyboard_check(ord("A"));
    key_jump = keyboard_check_pressed(vk_space);
    key_jump_held = keyboard_check(vk_space);
    key_shift = keyboard_check(vk_shift)

    //React to Input
    move = key_left + key_right;
    if(alarm[2]&lt;0){
        hsp = move * movespeed;
        if ((key_shift = 1) &amp;&amp; ((key_right = 1) &amp;&amp; (hsp &lt; MAX_SPEED)) || ((key_left = -1) &amp;&amp; (hsp &gt; - MAX_SPEED))) { 
            movespeed += acc;
            image_speed +=acc;
        }
     
        if (move = 0) {
            movespeed = 5  
            image_speed = 1
        }
        if ((key_shift = 0) &amp;&amp; (movespeed &gt; 5)) {
            movespeed -= (acc*1.2);
            image_speed -= (acc*1.2);
        }
        if (vsp &lt; 10) vsp += grav;
        if (place_meeting (x,y+1, obj_GrassTile)) {
            vsp = key_jump * -jumpspeed
        }
        if vsp&lt;0 &amp;&amp; (!key_jump_held) vsp = max(vsp,-jumpspeed/2)

    
    //Enemy Collision
    if (no_hit = 0) {
        if (place_meeting(x,y+1,obj_Slime)) {
            if(alarm[2]&lt;0){
                hit = instance_place(x,y,obj_Slime)
                hsp = (hit.dir * ((hit.hsp + hsp)+5))
                vsp = -0.5;
                
                alarm[2]=room_speed*0.2;
                no_hit = 1;
                alarm[0] = 60
                alarm[1] = 2
            } 
        }
    }
}
    //Horizontal Collision
        if (place_meeting(x+hsp,y,obj_GrassTile)) {
            while(!place_meeting(x+sign(hsp),y,obj_GrassTile)) {
                x += sign(hsp);
            }
            hsp = 0;
        }
    }
    x += hsp;
    
    //Vertical Collision
    if (place_meeting(x,y+vsp,obj_GrassTile)) {
        while(!place_meeting(x,y+sign(vsp),obj_GrassTile)) {
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;

    //Animate
    if (move!=0) image_xscale = move;
    if (!place_meeting(x,y+1,obj_GrassTile)) {
        if (vsp &lt; 0) sprite_index = spr_Player_Jump; else sprite_index = spr_Player_Fall; // sprite_index = spr_PlayerJump; else sprite_index = spr_PlayerFall;
    }
    else {
        image_speed = .33;
        if (hsp==0) {
            sprite_index = spr_Player
        }
        else {
            if (hsp!= 0) sprite_index = spr_Player_WalkRight;
            else {
                sprite_index = spr_Player;
            }
        }
    }

















</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
